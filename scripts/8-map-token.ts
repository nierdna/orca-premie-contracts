import { ethers } from "hardhat";
import { PreMarketTrade } from "../typechain-types";

/**
 * @title Map Token Script
 * @notice Script ƒë·ªÉ map ƒë·ªãa ch·ªâ token th·∫≠t v·ªõi tokenId trong pre-market
 * @dev Ch·ªâ admin m·ªõi c√≥ th·ªÉ map token, c·∫ßn thi·∫øt ƒë·ªÉ c√≥ th·ªÉ settle trades
 */

interface TokenMappingConfig {
    tokenId: string;           // Token ID t·ª´ token market
    realTokenAddress: string;  // ƒê·ªãa ch·ªâ token th·∫≠t ƒë√£ deploy
    symbol?: string;           // Symbol ƒë·ªÉ verify (optional)
}

/**
 * @notice Map token th·∫≠t v·ªõi tokenId
 * @param config C·∫•u h√¨nh mapping
 * @returns Promise<void>
 */
async function mapToken(config: TokenMappingConfig): Promise<void> {
    console.log("üó∫Ô∏è B·∫Øt ƒë·∫ßu map token...");

    // Get signer
    const [deployer] = await ethers.getSigners();
    console.log("üìù ƒê·ªãa ch·ªâ deployer:", deployer.address);

    // Contract address - l·∫•y t·ª´ environment
    const CONTRACT_ADDRESS = process.env.PREMARKET_CONTRACT || "YOUR_CONTRACT_ADDRESS";
    if (CONTRACT_ADDRESS === "YOUR_CONTRACT_ADDRESS") {
        throw new Error("‚ö†Ô∏è Vui l√≤ng set PREMARKET_CONTRACT trong environment");
    }

    // Get contract instance
    const preMarketTrade = await ethers.getContractAt("PreMarketTrade", CONTRACT_ADDRESS) as unknown as PreMarketTrade;

    try {
        // Validate input
        if (!config.tokenId || config.tokenId.length === 0) {
            throw new Error("Token ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        if (!config.realTokenAddress || config.realTokenAddress.length === 0) {
            throw new Error("ƒê·ªãa ch·ªâ token th·∫≠t kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        // Validate address format
        if (!ethers.isAddress(config.realTokenAddress)) {
            throw new Error("ƒê·ªãa ch·ªâ token kh√¥ng h·ª£p l·ªá");
        }

        // Ensure tokenId is bytes32 format
        let tokenId: string;
        if (config.tokenId.startsWith("0x") && config.tokenId.length === 66) {
            tokenId = config.tokenId;
        } else {
            // Try to convert symbol to tokenId
            try {
                tokenId = await preMarketTrade.symbolToTokenId(config.tokenId);
                if (tokenId === "0x0000000000000000000000000000000000000000000000000000000000000000") {
                    throw new Error(`Symbol '${config.tokenId}' kh√¥ng t·ªìn t·∫°i`);
                }
            } catch (error) {
                throw new Error(`Kh√¥ng th·ªÉ t√¨m th·∫•y tokenId cho symbol '${config.tokenId}'`);
            }
        }

        console.log("üìä Th√¥ng tin mapping:");
        console.log(`  - Token ID: ${tokenId}`);
        console.log(`  - ƒê·ªãa ch·ªâ token th·∫≠t: ${config.realTokenAddress}`);

        // Check if token exists
        const tokenInfo = await preMarketTrade.tokens(tokenId);
        if (!tokenInfo.exists) {
            throw new Error("Token market kh√¥ng t·ªìn t·∫°i");
        }

        console.log("üîç Th√¥ng tin token market hi·ªán t·∫°i:");
        console.log(`  - Symbol: ${tokenInfo.symbol}`);
        console.log(`  - Name: ${tokenInfo.name}`);
        console.log(`  - ƒê·ªãa ch·ªâ hi·ªán t·∫°i: ${tokenInfo.realAddress}`);
        console.log(`  - Th·ªùi gian t·∫°o: ${new Date(Number(tokenInfo.createdAt) * 1000).toISOString()}`);
        console.log(`  - Th·ªùi h·∫°n settle: ${tokenInfo.settleTimeLimit} gi√¢y`);

        // Verify symbol if provided
        if (config.symbol && tokenInfo.symbol !== config.symbol) {
            console.log("‚ö†Ô∏è Warning: Symbol kh√¥ng kh·ªõp v·ªõi token market");
            console.log(`  - Expected: ${config.symbol}`);
            console.log(`  - Actual: ${tokenInfo.symbol}`);
        }

        // Check if already mapped
        const [isMapped, currentAddress] = await preMarketTrade.isTokenMapped(tokenId);
        if (isMapped) {
            if (currentAddress.toLowerCase() === config.realTokenAddress.toLowerCase()) {
                console.log("‚úÖ Token ƒë√£ ƒë∆∞·ª£c map v·ªõi ƒë·ªãa ch·ªâ n√†y r·ªìi");
                return;
            } else {
                throw new Error(`Token ƒë√£ ƒë∆∞·ª£c map v·ªõi ƒë·ªãa ch·ªâ kh√°c: ${currentAddress}`);
            }
        }

        // Verify the real token contract exists and has basic ERC20 functions
        try {
            const tokenContract = await ethers.getContractAt("IERC20", config.realTokenAddress);

            // Try to get basic token info to verify it's a valid ERC20
            const [symbol, name, decimals] = await Promise.all([
                tokenContract.symbol().catch(() => "UNKNOWN"),
                tokenContract.name().catch(() => "UNKNOWN"),
                tokenContract.decimals().catch(() => 18)
            ]);

            console.log("ü™ô Th√¥ng tin token th·∫≠t:");
            console.log(`  - Symbol: ${symbol}`);
            console.log(`  - Name: ${name}`);
            console.log(`  - Decimals: ${decimals}`);

            // Verify symbol matches if both are available
            if (symbol !== "UNKNOWN" && tokenInfo.symbol !== "UNKNOWN" &&
                symbol.toLowerCase() !== tokenInfo.symbol.toLowerCase()) {
                console.log("‚ö†Ô∏è Warning: Symbol c·ªßa token th·∫≠t kh√¥ng kh·ªõp v·ªõi token market");
                console.log(`  - Token market symbol: ${tokenInfo.symbol}`);
                console.log(`  - Real token symbol: ${symbol}`);
            }

        } catch (error) {
            console.log("‚ö†Ô∏è Warning: Kh√¥ng th·ªÉ verify token contract, ti·∫øp t·ª•c mapping...");
        }

        // Check admin role
        const DEFAULT_ADMIN_ROLE = await preMarketTrade.DEFAULT_ADMIN_ROLE();
        const hasAdminRole = await preMarketTrade.hasRole(DEFAULT_ADMIN_ROLE, deployer.address);
        if (!hasAdminRole) {
            throw new Error("ƒê·ªãa ch·ªâ hi·ªán t·∫°i kh√¥ng c√≥ quy·ªÅn admin ƒë·ªÉ map token");
        }

        // Estimate gas
        const gasEstimate = await preMarketTrade.mapToken.estimateGas(tokenId, config.realTokenAddress);
        console.log(`‚õΩ ∆Ø·ªõc t√≠nh gas: ${gasEstimate.toString()}`);

        // Execute mapping
        console.log("üîÑ ƒêang th·ª±c hi·ªán mapping token...");
        const tx = await preMarketTrade.mapToken(tokenId, config.realTokenAddress, {
            gasLimit: gasEstimate + BigInt(20000) // Add buffer
        });

        console.log("üì§ Transaction ƒë√£ g·ª≠i:", tx.hash);
        console.log("‚è≥ ƒêang ch·ªù confirmation...");

        const receipt = await tx.wait();

        if (receipt && receipt.status === 1) {
            console.log("‚úÖ Map token th√†nh c√¥ng!");
            console.log(`üìã Transaction hash: ${tx.hash}`);
            console.log(`üìä Gas ƒë√£ s·ª≠ d·ª•ng: ${receipt.gasUsed.toString()}`);

            // Find TokenMapped event
            const logs = receipt.logs;
            for (const log of logs) {
                try {
                    const parsedLog = preMarketTrade.interface.parseLog({
                        topics: log.topics,
                        data: log.data
                    });

                    if (parsedLog && parsedLog.name === "TokenMapped") {
                        console.log(`üéØ Event TokenMapped:`);
                        console.log(`  - Token ID: ${parsedLog.args.tokenId}`);
                        console.log(`  - Real Address: ${parsedLog.args.realAddress}`);
                    }
                } catch (e) {
                    // Skip invalid logs
                }
            }

            // Verify mapping result
            const updatedTokenInfo = await preMarketTrade.tokens(tokenId);
            console.log("\nüìã Th√¥ng tin token sau khi map:");
            console.log(`  - Token ID: ${updatedTokenInfo.tokenId}`);
            console.log(`  - Symbol: ${updatedTokenInfo.symbol}`);
            console.log(`  - Name: ${updatedTokenInfo.name}`);
            console.log(`  - ƒê·ªãa ch·ªâ th·∫≠t: ${updatedTokenInfo.realAddress}`);
            console.log(`  - Th·ªùi gian mapping: ${new Date(Number(updatedTokenInfo.mappingTime) * 1000).toISOString()}`);
            console.log(`  - Th·ªùi h·∫°n settle: ${updatedTokenInfo.settleTimeLimit} gi√¢y`);

            // Check mapping status
            const [verifyMapped, verifyAddress] = await preMarketTrade.isTokenMapped(tokenId);
            console.log(`\n‚úÖ Tr·∫°ng th√°i mapping: ${verifyMapped ? 'ƒê√É MAP' : 'CH∆ØA MAP'}`);
            console.log(`üìç ƒê·ªãa ch·ªâ ƒë∆∞·ª£c map: ${verifyAddress}`);

        } else {
            throw new Error("Transaction th·∫•t b·∫°i");
        }

    } catch (error: any) {
        console.error("‚ùå L·ªói khi map token:");
        console.error(error.message);

        if (error.reason) {
            console.error("L√Ω do:", error.reason);
        }

        if (error.data) {
            try {
                const decodedError = preMarketTrade.interface.parseError(error.data);
                console.error("Chi ti·∫øt l·ªói:", decodedError?.name, decodedError?.args);
            } catch (e) {
                console.error("Raw error data:", error.data);
            }
        }

        throw error;
    }
}

/**
 * @notice L·∫•y danh s√°ch token ch∆∞a ƒë∆∞·ª£c map
 */
async function listUnmappedTokens(): Promise<void> {
    console.log("üìã ƒêang l·∫•y danh s√°ch token ch∆∞a map...");

    const CONTRACT_ADDRESS = process.env.PREMARKET_CONTRACT || "YOUR_CONTRACT_ADDRESS";
    if (CONTRACT_ADDRESS === "YOUR_CONTRACT_ADDRESS") {
        throw new Error("‚ö†Ô∏è Vui l√≤ng set PREMARKET_CONTRACT trong environment");
    }

    const preMarketTrade = await ethers.getContractAt("PreMarketTrade", CONTRACT_ADDRESS) as unknown as PreMarketTrade;

    // L·∫•y events TokenMarketCreated ƒë·ªÉ t√¨m t·∫•t c·∫£ tokens
    const filter = preMarketTrade.filters.TokenMarketCreated();
    const events = await preMarketTrade.queryFilter(filter, 0);

    console.log(`üîç T√¨m th·∫•y ${events.length} token markets`);

    const unmappedTokens: Array<{
        tokenId: string;
        symbol: string;
        name: string;
        settleTimeLimit: number;
        createdAt: Date;
    }> = [];

    for (const event of events) {
        if (event.args) {
            const tokenId = event.args.tokenId;
            const [isMapped] = await preMarketTrade.isTokenMapped(tokenId);

            if (!isMapped) {
                const tokenInfo = await preMarketTrade.tokens(tokenId);
                unmappedTokens.push({
                    tokenId: tokenId,
                    symbol: tokenInfo.symbol,
                    name: tokenInfo.name,
                    settleTimeLimit: Number(tokenInfo.settleTimeLimit),
                    createdAt: new Date(Number(tokenInfo.createdAt) * 1000)
                });
            }
        }
    }

    if (unmappedTokens.length === 0) {
        console.log("‚úÖ T·∫•t c·∫£ token ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c map");
        return;
    }

    console.log(`\nüìã ${unmappedTokens.length} token ch∆∞a ƒë∆∞·ª£c map:`);
    unmappedTokens.forEach((token, index) => {
        console.log(`\n${index + 1}. ${token.symbol} (${token.name})`);
        console.log(`   Token ID: ${token.tokenId}`);
        console.log(`   Th·ªùi h·∫°n settle: ${token.settleTimeLimit / (24 * 60 * 60)} ng√†y`);
        console.log(`   T·∫°o l√∫c: ${token.createdAt.toISOString()}`);
    });
}

// Main execution v·ªõi examples
async function main() {
    const command = process.argv[2];

    if (command === "list") {
        await listUnmappedTokens();
        return;
    }

    // Example configurations cho mapping
    const examples: TokenMappingConfig[] = [
        {
            tokenId: process.env.TOKEN_ID!, // Ho·∫∑c symbol
            realTokenAddress: "0xd01ceeEa03fbadfA1B5aa5C1891a683c02f38C8f", // ƒê·ªãa ch·ªâ token th·∫≠t
            // symbol: "NEW-TOKEN" // Optional verification
        },
        // {
        //     tokenId: "DEGEN-V2", // S·ª≠ d·ª•ng symbol thay v√¨ tokenId
        //     realTokenAddress: "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd",
        //     symbol: "DEGEN-V2"
        // }
    ];

    // Ch·ªçn config ƒë·ªÉ test (c√≥ th·ªÉ thay ƒë·ªïi index ho·∫∑c truy·ªÅn t·ª´ command line)
    let selectedConfig: TokenMappingConfig;

    if (process.argv.length >= 5) {
        // Truy·ªÅn params t·ª´ command line: npm run script tokenId realAddress [symbol]
        selectedConfig = {
            tokenId: process.argv[3],
            realTokenAddress: process.argv[4],
            symbol: process.argv[5] || undefined
        };
    } else {
        // S·ª≠ d·ª•ng example
        selectedConfig = examples[0];
        console.log("üí° S·ª≠ d·ª•ng example config. ƒê·ªÉ truy·ªÅn params: npm run script <tokenId> <realAddress> [symbol]");
    }

    console.log("üéØ Map token v·ªõi c·∫•u h√¨nh:");
    console.log(JSON.stringify(selectedConfig, null, 2));

    await mapToken(selectedConfig);
}

// Export functions cho reuse
export { mapToken, listUnmappedTokens, TokenMappingConfig };

// Run if called directly
if (require.main === module) {
    main()
        .then(() => {
            console.log("üéâ Script ho√†n th√†nh th√†nh c√¥ng!");
            process.exit(0);
        })
        .catch((error) => {
            console.error("üí• Script th·∫•t b·∫°i:", error);
            process.exit(1);
        });
}
