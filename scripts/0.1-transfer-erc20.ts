import { ethers } from "hardhat";

/**
 * Script ƒë∆°n gi·∫£n ƒë·ªÉ chuy·ªÉn ERC20 token t·ª´ deployer sang user1
 * Ch·∫°y v·ªõi: npx hardhat run scripts/0.1-transfer-erc20.ts --network localhost
 */
async function main() {
    console.log("üöÄ B·∫Øt ƒë·∫ßu deploy MockERC20 v√† chuy·ªÉn token t·ª´ deployer sang user1...");

    // L·∫•y danh s√°ch accounts t·ª´ hardhat
    const [deployer, user1,] = await ethers.getSigners();

    console.log("üìã Th√¥ng tin accounts:");
    console.log("Deployer address:", deployer.address);
    console.log("User1 address:", user1.address);

    // Deploy MockERC20 contract
    console.log("\nüìú ƒêang deploy MockERC20 contract...");
    const abi = [
        "function mint(address to, uint256 amount) public",
        "function balanceOf(address account) public view returns (uint256)",
        "function transfer(address to, uint256 amount) public returns (bool)",
        "function decimals() public view returns (uint8)",
        "function name() public view returns (string)",
        "function symbol() public view returns (string)",
        "function totalSupply() public view returns (uint256)",
        "function transferFrom(address from, address to, uint256 amount) public returns (bool)",
    ];
    const mockToken = new ethers.Contract("0x2fEe5278e6552aA879137a95F550E7736541C303", abi, deployer) as any;
    const tokenAddress = await mockToken.getAddress();
    console.log("‚úÖ MockERC20 deployed t·∫°i ƒë·ªãa ch·ªâ:", tokenAddress);
    const decimals = await mockToken.decimals();
    console.log("Decimals:", decimals);

    const deployerBalanceBefore = await mockToken.balanceOf(deployer.address);
    const user1BalanceBefore = await mockToken.balanceOf(user1.address);

    console.log("\nüí∞ Token balance tr∆∞·ªõc khi chuy·ªÉn:");
    console.log("Deployer balance:", ethers.formatUnits(deployerBalanceBefore, decimals), "MOCK");
    console.log("User1 balance:", ethers.formatUnits(user1BalanceBefore, decimals), "MOCK");

    // S·ªë l∆∞·ª£ng token mu·ªën chuy·ªÉn (100 MOCK)
    const transferAmount = ethers.parseUnits("10000", decimals);

    console.log("\nüì§ ƒêang chuy·ªÉn", ethers.formatUnits(transferAmount, decimals), "MOCK t·ª´ deployer sang user1...");

    // Th·ª±c hi·ªán chuy·ªÉn ERC20 token
    const tx = await mockToken.connect(deployer).transfer(user1.address, transferAmount);

    console.log("Transaction hash:", tx.hash);

    // Ch·ªù transaction ƒë∆∞·ª£c confirm
    const receipt = await tx.wait();
    console.log("‚úÖ Transaction confirmed in block:", receipt?.blockNumber);

    // Ki·ªÉm tra balance sau khi chuy·ªÉn
    const deployerBalanceAfter = await mockToken.balanceOf(deployer.address);
    const user1BalanceAfter = await mockToken.balanceOf(user1.address);

    console.log("\nüí∞ Token balance sau khi chuy·ªÉn:");
    console.log("Deployer balance:", ethers.formatUnits(deployerBalanceAfter, decimals), "MOCK");
    console.log("User1 balance:", ethers.formatUnits(user1BalanceAfter, decimals), "MOCK");

    // T√≠nh to√°n gas fee ƒë√£ s·ª≠ d·ª•ng
    const gasUsed = receipt?.gasUsed || 0n;
    const gasPrice = receipt?.gasPrice || 0n;
    const gasFee = gasUsed * gasPrice;

    console.log("\n‚õΩ Chi ph√≠ gas cho transfer:");
    console.log("Gas used:", gasUsed.toString());
    console.log("Gas fee:", ethers.formatEther(gasFee), "ETH");

    // Hi·ªÉn th·ªã th√¥ng tin token contract
    const tokenName = await mockToken.name();
    const tokenSymbol = await mockToken.symbol();
    const tokenDecimals = await mockToken.decimals();
    const totalSupply = await mockToken.totalSupply();

    console.log("\nüìä Th√¥ng tin token contract:");
    console.log("Contract address:", tokenAddress);
    console.log("Token name:", tokenName);
    console.log("Token symbol:", tokenSymbol);
    console.log("Decimals:", tokenDecimals);
    console.log("Total supply:", ethers.formatUnits(totalSupply, decimals), tokenSymbol);

    console.log("\nüéâ Chuy·ªÉn ERC20 token th√†nh c√¥ng!");
}

// X·ª≠ l√Ω l·ªói v√† ch·∫°y script
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå L·ªói:", error);
        process.exit(1);
    });
