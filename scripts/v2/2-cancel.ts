import { ethers } from "hardhat";
import { HardhatEthersSigner } from "@nomicfoundation/hardhat-ethers/signers";
import { PreMarketTradeV2, EscrowVault, IERC20Metadata } from "../../typechain-types";
import "dotenv/config";

/**
 * @title Cancellation Script for PreMarketTradeV2
 * @notice Script ƒë·ªÉ th·ª±c thi ch·ª©c nƒÉng `cancel` tr√™n contract PreMarketTradeV2.
 * @dev Script n√†y chu·∫©n b·ªã d·ªØ li·ªáu cancellation, t·∫°o ch·ªØ k√Ω EIP-712 t·ª´ operator,
 *      v√† g·ª≠i giao d·ªãch `cancel` t·ª´ t√†i kho·∫£n c·ªßa buyer.
 */

// ============ Interfaces ============

/**
 * @notice C·∫•u h√¨nh cho m·ªôt cancellation.
 */
interface CancellationConfig {
    orderIds: string[];         // M·∫£ng c√°c order ID (bytes32) ƒë·ªÉ h·ªßy
    collateralToken: string;    // ƒê·ªãa ch·ªâ token d√πng ƒë·ªÉ thanh to√°n
    amount: string;             // S·ªë l∆∞·ª£ng collateral ƒë·ªÉ r√∫t v·ªÅ (wei)
    deadline: number;           // Th·ªùi h·∫°n c·ªßa cancellation (timestamp)
}

/**
 * @notice D·ªØ li·ªáu ƒë·∫ßy ƒë·ªß cho cancellation, bao g·ªìm ch·ªØ k√Ω.
 */
interface CancellationData extends CancellationConfig {
    buyer: string;              // ƒê·ªãa ch·ªâ c·ªßa buyer th·ª±c hi·ªán cancel
    nonce: bigint;
    operatorSignature: string;
}

// ============ Helper Functions ============

/**
 * @notice L·∫•y c√°c signers c·∫ßn thi·∫øt (operator, buyer).
 * @dev C·∫•u h√¨nh c√°c v√≠ n√†y trong hardhat.config.ts.
 */
async function getSigners() {
    const signers = await ethers.getSigners();
    const operator = signers[0]; // Gi·∫£ s·ª≠ v√≠ ƒë·∫ßu ti√™n l√† operator
    const buyer = signers[2];   // Gi·∫£ s·ª≠ v√≠ th·ª© 3 l√† buyer (kh·ªõp v·ªõi buyer trong settle)

    console.log("üîë Operator address:", operator.address);
    console.log("üîë Buyer address:", buyer.address);

    return { operator, buyer };
}

/**
 * @notice T·∫°o ch·ªØ k√Ω EIP-712 cho d·ªØ li·ªáu cancellation.
 * @dev Ch·ªØ k√Ω n√†y ƒë∆∞·ª£c t·∫°o b·ªüi operator ƒë·ªÉ x√°c th·ª±c cancellation.
 */
async function createCancellationSignature(
    tradeContract: PreMarketTradeV2,
    operator: HardhatEthersSigner,
    buyerAddress: string,
    cancelConfig: CancellationConfig
): Promise<{ signature: string; nonce: bigint }> {
    console.log("\n‚úçÔ∏è  Creating EIP-712 cancellation signature...");

    const nonce = await tradeContract.operatorNonce();
    const chainId = (await ethers.provider.getNetwork()).chainId;

    const domain = {
        name: "PreMarketTradeV2",
        version: "2.0.0", // Ph·∫£i kh·ªõp v·ªõi version trong __EIP712_init
        chainId: chainId,
        verifyingContract: await tradeContract.getAddress()
    };

    // Types cho CancellationData struct trong contract
    const types = {
        Cancellation: [
            { name: 'orderIds', type: 'bytes32[]' }, // Contract hash m·∫£ng n√†y
            { name: 'buyer', type: 'address' },
            { name: 'collateralToken', type: 'address' },
            { name: 'amount', type: 'uint256' },
            { name: 'deadline', type: 'uint256' },
            { name: 'nonce', type: 'uint256' },
        ]
    };

    // D·ªØ li·ªáu ƒë·ªÉ k√Ω
    // Ch√∫ √Ω: contract hash c√°c m·∫£ng tr∆∞·ªõc khi ƒë∆∞a v√†o struct hash ch√≠nh
    const value = {
        orderIds: cancelConfig.orderIds,
        buyer: buyerAddress,
        collateralToken: cancelConfig.collateralToken,
        amount: cancelConfig.amount,
        deadline: cancelConfig.deadline,
        nonce: nonce,
    };

    console.log("üñãÔ∏è Signing data:", value);
    const signature = await operator.signTypedData(domain, types, value);
    console.log("‚úÖ Signature created:", signature);

    return { signature, nonce };
}


// ============ Main Execution Function ============

/**
 * @notice Th·ª±c thi cancellation.
 */
async function executeCancel(
    tradeContract: PreMarketTradeV2,
    buyer: HardhatEthersSigner,
    cancellationData: CancellationData
) {
    console.log("\nüöÄ Executing cancellation...");

    try {
        const collateralToken = await ethers.getContractAt("IERC20Metadata", cancellationData.collateralToken) as unknown as IERC20Metadata;
        const vault = await ethers.getContractAt("EscrowVault", process.env.VAULT_CONTRACT!) as unknown as EscrowVault;
        const collateralDecimals = await collateralToken.decimals();

        // 1. Log initial state
        console.log("üìä Initial State:");
        const buyerCollateralBefore = await vault.getBalance(buyer.address, cancellationData.collateralToken);
        console.log(`  - Buyer collateral in vault: ${ethers.formatUnits(buyerCollateralBefore, collateralDecimals)}`);

        // 2. Prepare data for contract call
        const data = {
            orderIds: cancellationData.orderIds,
            buyer: cancellationData.buyer,
            collateralToken: cancellationData.collateralToken,
            amount: cancellationData.amount,
            deadline: cancellationData.deadline,
            nonce: cancellationData.nonce,
            operatorSignature: cancellationData.operatorSignature,
        };

        // 3. Estimate gas and execute
        console.log("\n‚õΩ Estimating gas for cancel...");
        const gasEstimate = await tradeContract.connect(buyer).cancel.estimateGas(data);
        console.log(`  - Gas estimate: ${gasEstimate.toString()}`);

        console.log("...Submitting cancel transaction...");
        const tx = await tradeContract.connect(buyer).cancel(data, {
            gasLimit: gasEstimate + BigInt(50000)
        });

        console.log(`üì§ Transaction sent: ${tx.hash}`);
        console.log("‚è≥ Waiting for confirmation...");
        const receipt = await tx.wait();

        if (receipt && receipt.status === 1) {
            console.log("‚úÖ Cancellation successful!");
            const cancellationEvent = receipt.logs?.find(
                log => (log as any).eventName === 'Cancellation'
            );
            if (cancellationEvent) {
                console.log("  - Cancellation Event found in transaction logs.");
            }
        } else {
            throw new Error(`Transaction failed: ${tx.hash}`);
        }

        // 4. Log final state
        console.log("\nüìä Final State:");
        const buyerCollateralAfter = await vault.getBalance(buyer.address, cancellationData.collateralToken);
        console.log(`  - Buyer collateral in vault: ${ethers.formatUnits(buyerCollateralAfter, collateralDecimals)}`);

    } catch (error: any) {
        console.error("‚ùå Error during cancellation:", error.message);
        if (error.data) {
            const decodedError = tradeContract.interface.parseError(error.data);
            console.error(`Contract Error: ${decodedError?.name}`, decodedError?.args);
        }
        throw error;
    }
}

// ============ Main Script ============
async function main() {
    console.log("--- PreMarketTradeV2 Cancellation Script ---");

    // Get contract addresses from .env
    const tradeContractAddress = process.env.V2_CONTRACT;
    const usdcAddress = process.env.USDC_ADDRESS; // Collateral Token

    if (!tradeContractAddress || !usdcAddress || !process.env.VAULT_CONTRACT) {
        throw new Error("Missing contract addresses in .env file");
    }

    // Get signers
    const { operator, buyer } = await getSigners();

    // Get contract instance
    const tradeContract = await ethers.getContractAt("PreMarketTradeV2", tradeContractAddress) as unknown as PreMarketTradeV2;

    // --- Prepare Cancellation Data ---
    // D·ªØ li·ªáu n√†y th∆∞·ªùng ƒë·∫øn t·ª´ off-chain logic, v√≠ d·ª• buyer y√™u c·∫ßu h·ªßy l·ªánh
    // v√† operator x√°c nh·∫≠n.
    const cancelConfig: CancellationConfig = {
        orderIds: [ethers.id("ORDER_3"), ethers.id("ORDER_4")],
        collateralToken: usdcAddress,
        amount: ethers.parseUnits("5", 6).toString(), // S·ªë ti·ªÅn buyer mu·ªën r√∫t
        deadline: Math.floor(Date.now() / 1000) + 3600, // 1 gi·ªù k·ªÉ t·ª´ b√¢y gi·ªù
    };

    console.log("\nüìã Cancellation Configuration:", cancelConfig);

    // --- Create Signature ---
    const { signature, nonce } = await createCancellationSignature(tradeContract, operator, buyer.address, cancelConfig);

    const cancellationData: CancellationData = {
        ...cancelConfig,
        buyer: buyer.address,
        nonce: nonce,
        operatorSignature: signature
    };

    // --- Execute Cancellation ---
    await executeCancel(tradeContract, buyer, cancellationData);

    console.log("\n--- Script finished ---");
}

if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch(error => {
            console.error(error);
            process.exit(1);
        });
}

export { executeCancel, createCancellationSignature, CancellationConfig };
